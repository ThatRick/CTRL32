#include <Arduino.h>
#include <U8g2lib.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <ESPAsyncWebServer.h>

#include "CTRL/FunctionBlock.h"
#include "CTRL/Circuit.h"
#include "CTRL/FunctionLib.h"

#define SENSOR 34

#define OLED_CLOCK 15
#define OLED_DATA 4
#define OLED_RESET 16

#define SENSOR_PROCESSING_CYCLE_MS 10
#define WEBSOCKET_DATA_CYCLE_MS 1000
#define DISPLAY_UPDATE_CYCLE_MS 100

#define SENSOR_DATA_BUFFER_LEN 200

#define WATT_HOUR_PER_PULSE 1

enum wsMessageType
{
    WS_MSG_TYPE_NULL,
    WS_MSG_TYPE_MEAS,
    WS_MSG_TYPE_INTENSITY_GRAPH,
    WS_MSG_TYPE_CONFIG,
    WS_MSG_TYPE_SET_CONFIG
};

// ***********************************************
//    Light sensor
// ***********************************************

volatile bool signalStateHigh = false;

volatile uint32_t risingEdgeCount = 0;
volatile uint32_t fallingEdgeCount = 0;
volatile uint32_t pulseCountTotal = 0;

volatile uint64_t prevChangeTime = 0;
volatile uint32_t accuHighTime = 0;
volatile uint32_t accuLowTime = 0;

volatile float signalHighTreshold = 75.0;
volatile float signalLowTreshold = 20.0;

volatile uint32_t debounceTime_ms = 200;
volatile uint64_t prevRisingEdgeTime = 0;

volatile uint32_t pulseInterval_us = 0;
volatile float pulseIntervalFiltered_us = 0.0;
volatile float pulseIntervalFilterGain = 0.5;

float highRateFiltered = 0.0;
uint64_t accuTotalTime = 0;

void IRAM_ATTR onLightSensorChange()
{
    uint64_t now = esp_timer_get_time();
    uint64_t elapsed = now - prevChangeTime;
    prevChangeTime = now;

    bool sensorState = digitalRead(SENSOR);
    // Sensor on
    if (sensorState == LOW)
    {
        risingEdgeCount++;
        accuHighTime += elapsed;
    }
    // Sensor off
    else
    {
        fallingEdgeCount++;
        accuLowTime += elapsed;
    }
}

// Light detector Rising Edge
void IRAM_ATTR onSignalHigh()
{
    // Serial.println("LED ON");
    signalStateHigh = true;
    digitalWrite(LED_BUILTIN, HIGH);
    pulseCountTotal++;

    const uint64_t now = esp_timer_get_time();
    pulseInterval_us = now - prevRisingEdgeTime;
    prevRisingEdgeTime = now;

    pulseIntervalFiltered_us = pulseIntervalFiltered_us * pulseIntervalFilterGain + (float)pulseInterval_us * (1.0 - pulseIntervalFilterGain);
}

// Light detector Falling Edge
void IRAM_ATTR onSignalLow()
{
    // Serial.println("LED OFF");
    signalStateHigh = false;
    digitalWrite(LED_BUILTIN, LOW);
}

// ***********************************************
//    OLED Screen
// ***********************************************

U8G2_SSD1306_128X64_NONAME_F_SW_I2C g_OLED(U8G2_R2, OLED_CLOCK, OLED_DATA, OLED_RESET);

int g_lineHeight = 0;

esp_timer_handle_t displayUpdateTimer;

void IRAM_ATTR updateDisplay(void *args)
{
    g_OLED.clearBuffer();
    g_OLED.setCursor(0, g_lineHeight);
    g_OLED.printf("R: %d", accuHighTime);
    g_OLED.setCursor(0, g_lineHeight * 2);
    g_OLED.printf("F: %d", accuLowTime);
    g_OLED.setCursor(0, g_lineHeight * 3);
    g_OLED.printf("P: %d", pulseCountTotal);
    g_OLED.setCursor(0, g_lineHeight * 4);
    g_OLED.printf("R: %.1f / %lluus", highRateFiltered, accuTotalTime);
    g_OLED.sendBuffer();
}

// ***********************************************
//    Web server
// ***********************************************

const char *ssid = "Linksys";
const char *pw = "langaton";

AsyncWebServer webServer(80);

// ***********************************************
//    Websocket server
// ***********************************************

AsyncWebSocket ws("/ws");
esp_timer_handle_t websocketCycleTimer;

bool wsConnected = false;

struct MeasData_t
{
    uint8_t header[4] = {WS_MSG_TYPE_MEAS, 0, 0, 0};
    uint32_t pulseCount;
    float pulseInterval;
} measData;

void onWebsocketSend(void *arg)
{
    if (!wsConnected)
        return;

    measData.pulseCount = pulseCountTotal;
    measData.pulseInterval = pulseIntervalFiltered_us;

    ws.binaryAll((char *)&measData, sizeof(MeasData_t));
}

void onWSSendData(const void* data, size_t len)
{
    if (!wsConnected) return;

    ws.binaryAll((const char*)data, len);
}

void onWSEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
    if (type == WS_EVT_CONNECT)
    {
        // client connected
        Serial.printf("ws[%s][%u] connect\n", server->url(), client->id());
        client->printf("Hello Client %u :)", client->id());
        wsConnected = true;
    }
    else if (type == WS_EVT_DISCONNECT)
    {
        // client disconnected
        Serial.printf("ws[%s][%u] disconnected\n", server->url(), client->id());
        wsConnected = false;
    }
    else if (type == WS_EVT_ERROR)
    {
        // error was received from the other end
        Serial.printf("ws[%s][%u] error(%u): %s\n", server->url(), client->id(), *((uint16_t *)arg), (char *)data);
    }
    else if (type == WS_EVT_DATA)
    {
        // data packet
        AwsFrameInfo *info = (AwsFrameInfo *)arg;
        Serial.printf("ws[%s][%u] %s-message[%llu]: ", server->url(), client->id(), (info->opcode == WS_TEXT) ? "text" : "binary", info->len);
        if (info->opcode == WS_TEXT)
        {
            data[len] = 0;
            Serial.printf("%s\n", (char *)data);
        }
        else
        {
            for (size_t i = 0; i < info->len; i++)
            {
                Serial.printf("%02x ", data[i]);
            }
            Serial.printf("\n");
        }
        if (info->opcode == WS_TEXT)
            client->text("I got your text message");
        else
            client->binary("I got your binary message");
    }
}

// ***********************************************
//    Sensor data processing
// ***********************************************

esp_timer_handle_t sensorProcessingTimer = NULL;
float highRateFiltering = 0.0;

class DataBuffer
{
public:
    static const size_t headerSize = 4;
    static const size_t capacity = 100;
    static const size_t size = headerSize + capacity;
    DataBuffer() : index(headerSize)
    {
        buffer[0] = WS_MSG_TYPE_INTENSITY_GRAPH;
    }
    void addValue(uint8_t value)
    {
        if (index < size)
        {
            buffer[index++] = value;
        }
    }
    bool isFull()
    {
        return (index == size);
    }
    void reset()
    {
        index = headerSize;
    }
    uint8_t *data()
    {
        return buffer;
    }

protected:
    uint8_t buffer[size];
    size_t index;

} sensorDataBuffer;

void IRAM_ATTR onSensorProcessing(void *arg)
{
    uint64_t now = esp_timer_get_time();
    uint64_t elapsed = now - prevChangeTime;
    prevChangeTime = now;

    bool sensorState = digitalRead(SENSOR);
    if (sensorState == LOW)
        accuHighTime += elapsed;
    if (sensorState == HIGH)
        accuLowTime += elapsed;

    accuTotalTime = accuHighTime + accuLowTime;
    float highRate;
    if (accuLowTime == 0 && accuHighTime > 0)
        highRate = 100.0;
    else if (accuLowTime == 0)
        highRate = 0.0;
    else
        highRate = ((float)accuHighTime / (float)accuTotalTime) * 100.0;

    highRateFiltered = highRateFiltered * highRateFiltering + highRate * (1.0 - highRateFiltering);

    accuHighTime = 0;
    accuLowTime = 0;

    if (highRate > signalHighTreshold && !signalStateHigh)
        onSignalHigh();
    else if (highRate < signalLowTreshold && signalStateHigh)
        onSignalLow();

    if (!wsConnected)
        return;
    uint8_t data = (uint8_t)(highRate * 2.55);
    sensorDataBuffer.addValue(data);
    if (sensorDataBuffer.isFull())
    {
        ws.binaryAll(sensorDataBuffer.data(), sensorDataBuffer.size);
        sensorDataBuffer.reset();
    }
}

// ***********************************************
//    CTRL32 setup
// ***********************************************
void printFunctionBlockIOValues(FunctionBlock *func)
{
    Serial.printf("Function block %u [%p]:\n", func->opcode, func);
    size_t thisSize = sizeof(*func);
    size_t dataAllocatedSize = func->dataSize();
    Serial.printf("  Mem size: %d bytes (inst: %d bytes  data: %d bytes)\n", thisSize + dataAllocatedSize, thisSize, dataAllocatedSize);
    for (uint i = 0; i < func->numInputs; i++)
    {
        IO_TYPE ioType = func->readInputType(i);
        const char *ioTypeString = func->getIOTypeString(ioType);
        if (ioType == IO_TYPE_FLOAT)
        {
            Serial.printf("  Input %u: %f (%s)\n", i, func->inputValue(i).f, ioTypeString);
        }
        if (ioType == IO_TYPE_INT)
        {
            Serial.printf("  Input %u: %i (%s)\n", i, func->inputValue(i).i, ioTypeString);
        }
        else
        {
            Serial.printf("  Input %u: %u (%s)\n", i, func->inputValue(i).u, ioTypeString);
        }
    }
    for (uint i = 0; i < func->numOutputs; i++)
    {
        IO_TYPE ioType = func->readOutputType(i);
        const char *ioTypeString = func->getIOTypeString(ioType);
        if (ioType == IO_TYPE_FLOAT)
        {
            Serial.printf("  Output %u: %f (%s)\n", i, func->outputValue(i).f, ioTypeString);
        }
        else if (ioType == IO_TYPE_INT)
        {
            Serial.printf("  Output %u: %i (%s)\n", i, func->outputValue(i).i, ioTypeString);
        }
        else
        {
            Serial.printf("  Output %u: %u (%s)\n", i, func->outputValue(i).u, ioTypeString);
        }
    }
}

void CTRL32_setup()
{
    size_t initHeapSize = heap_caps_get_free_size(MALLOC_CAP_8BIT);
    FunctionBlock *funcAND = createFunction(BooleanLogic::LIB_ID, BooleanLogic::FUNC_ID_AND);

    Circuit *loop = new Circuit(4, 2, 16);
    loop->addFunction(funcAND);

    printFunctionBlockIOValues(funcAND);

    funcAND->setInput(0, false);
    loop->update(0.1f);

    printFunctionBlockIOValues(funcAND);

    size_t currentHeapSize = heap_caps_get_free_size(MALLOC_CAP_8BIT);
    Serial.printf("Heap size: initial %d current %d (diff %d)", initHeapSize, currentHeapSize, initHeapSize - currentHeapSize);
}

// ***********************************************
//    Setup
// ***********************************************

void setup()
{
    Serial.begin(115200);

    g_OLED.begin();
    g_OLED.setFont(u8g2_font_profont15_tf);
    g_lineHeight = g_OLED.getFontAscent() - g_OLED.getFontDescent();
    g_OLED.clearBuffer();
    g_OLED.setCursor(0, g_lineHeight * 1);

    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(SENSOR, INPUT);

    attachInterrupt(SENSOR, onLightSensorChange, CHANGE);
    prevChangeTime = esp_timer_get_time();

    if (!SPIFFS.begin())
    {
        Serial.println("Error mounting SPIFFS");
        g_OLED.printf("Error mounting SPIFFS");
        g_OLED.sendBuffer();
        delay(2000);
        g_OLED.clearBuffer();
    }

    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, pw);
    Serial.print("Connecting to WiFi ..");

    g_OLED.printf("Connecting to WiFi...");
    g_OLED.sendBuffer();
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(1000);
    }
    Serial.print("Connected with IP ");
    Serial.println(WiFi.localIP());
    g_OLED.setCursor(0, g_lineHeight * 2);
    g_OLED.printf("IP %s", WiFi.localIP().toString().c_str());
    g_OLED.sendBuffer();
    delay(2000);

    // Web server
    webServer.serveStatic("/", SPIFFS, "/");
    webServer.on("/", HTTP_ANY, [](AsyncWebServerRequest *request)
                 { request->send(SPIFFS, "/index.html"); });

    // Websocket
    ws.onEvent(onWSEvent);
    webServer.addHandler(&ws);

    webServer.begin();

    esp_timer_create_args_t args;

    // Sensor processing cycle timer
    args.callback = onSensorProcessing;
    esp_timer_create(&args, &sensorProcessingTimer);
    esp_timer_start_periodic(sensorProcessingTimer, SENSOR_PROCESSING_CYCLE_MS * 1000);

    // Websocket send cycle timer
    args.callback = onWebsocketSend;
    esp_timer_create(&args, &websocketCycleTimer);
    esp_timer_start_periodic(websocketCycleTimer, WEBSOCKET_DATA_CYCLE_MS * 1000);

    CTRL32_setup();
}

void loop()
{
    delay(100);
    updateDisplay(NULL);
}
